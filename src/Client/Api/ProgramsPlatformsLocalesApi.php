<?php
/**
 * ProgramsPlatformsLocalesApi
 * PHP version 5
 *
 * @category Class
 * @package  Softonic\NoodleSetupApiSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Noodle Setup API
 *
 * API that allows configure programs for Noodle
 *
 * OpenAPI spec version: 1.0.0
 * Contact: development@softonic.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Softonic\NoodleSetupApiSdk\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Softonic\NoodleSetupApiSdk\ApiException;
use Softonic\NoodleSetupApiSdk\Client\Model\ModelInterface;
use Softonic\NoodleSetupApiSdk\Configuration;
use Softonic\NoodleSetupApiSdk\HeaderSelector;
use Softonic\NoodleSetupApiSdk\ObjectSerializer;

/**
 * ProgramsPlatformsLocalesApi Class Doc Comment
 *
 * @category Class
 * @package  Softonic\NoodleSetupApiSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProgramsPlatformsLocalesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createProgramPlatformLocale
     *
     * Creates a program configuration for a specific platform and locale
     *
     * @param  string $id_program Program identifier (required)
     * @param  string $id_platform Platform identifier (required)
     * @param  \Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale $body body (required)
     *
     * @throws \Softonic\NoodleSetupApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale
     */
    public function createProgramPlatformLocale($id_program, $id_platform, $body)
    {
        list($response) = $this->createProgramPlatformLocaleWithHttpInfo($id_program, $id_platform, $body);
        return $response;
    }

    /**
     * Operation createProgramPlatformLocaleWithHttpInfo
     *
     * Creates a program configuration for a specific platform and locale
     *
     * @param  string $id_program Program identifier (required)
     * @param  string $id_platform Platform identifier (required)
     * @param  \Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale $body (required)
     *
     * @throws \Softonic\NoodleSetupApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProgramPlatformLocaleWithHttpInfo($id_program, $id_platform, $body)
    {
        $returnType = '\Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale';
        $request = $this->createProgramPlatformLocaleRequest($id_program, $id_platform, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createProgramPlatformLocaleAsync
     *
     * Creates a program configuration for a specific platform and locale
     *
     * @param  string $id_program Program identifier (required)
     * @param  string $id_platform Platform identifier (required)
     * @param  \Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProgramPlatformLocaleAsync($id_program, $id_platform, $body)
    {
        return $this->createProgramPlatformLocaleAsyncWithHttpInfo($id_program, $id_platform, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createProgramPlatformLocaleAsyncWithHttpInfo
     *
     * Creates a program configuration for a specific platform and locale
     *
     * @param  string $id_program Program identifier (required)
     * @param  string $id_platform Platform identifier (required)
     * @param  \Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProgramPlatformLocaleAsyncWithHttpInfo($id_program, $id_platform, $body)
    {
        $returnType = '\Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale';
        $request = $this->createProgramPlatformLocaleRequest($id_program, $id_platform, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createProgramPlatformLocale'
     *
     * @param  string $id_program Program identifier (required)
     * @param  string $id_platform Platform identifier (required)
     * @param  \Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createProgramPlatformLocaleRequest($id_program, $id_platform, $body)
    {
        // verify the required parameter 'id_program' is set
        if ($id_program === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_program when calling createProgramPlatformLocale'
            );
        }
        // verify the required parameter 'id_platform' is set
        if ($id_platform === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_platform when calling createProgramPlatformLocale'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createProgramPlatformLocale'
            );
        }

        $resourcePath = '/programs/{id_program}/platforms/{id_platform}/locales';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id_program !== null) {
            $resourcePath = str_replace(
                '{' . 'id_program' . '}',
                ObjectSerializer::toPathValue($id_program),
                $resourcePath
            );
        }
        // path params
        if ($id_platform !== null) {
            $resourcePath = str_replace(
                '{' . 'id_platform' . '}',
                ObjectSerializer::toPathValue($id_platform),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            elseif ($httpBody instanceof ModelInterface && $headers['Content-Type'] === 'application/json') {
                $httpBody = $httpBody->toArray(true);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteProgramPlatformLocale
     *
     * Deletes a program configuration for a specific platform and locale
     *
     * @param  string $id_program Program identifier (required)
     * @param  string $id_platform Platform identifier (required)
     * @param  string $id_locale Locale identifier (required)
     *
     * @throws \Softonic\NoodleSetupApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale
     */
    public function deleteProgramPlatformLocale($id_program, $id_platform, $id_locale)
    {
        list($response) = $this->deleteProgramPlatformLocaleWithHttpInfo($id_program, $id_platform, $id_locale);
        return $response;
    }

    /**
     * Operation deleteProgramPlatformLocaleWithHttpInfo
     *
     * Deletes a program configuration for a specific platform and locale
     *
     * @param  string $id_program Program identifier (required)
     * @param  string $id_platform Platform identifier (required)
     * @param  string $id_locale Locale identifier (required)
     *
     * @throws \Softonic\NoodleSetupApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProgramPlatformLocaleWithHttpInfo($id_program, $id_platform, $id_locale)
    {
        $returnType = '\Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale';
        $request = $this->deleteProgramPlatformLocaleRequest($id_program, $id_platform, $id_locale);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteProgramPlatformLocaleAsync
     *
     * Deletes a program configuration for a specific platform and locale
     *
     * @param  string $id_program Program identifier (required)
     * @param  string $id_platform Platform identifier (required)
     * @param  string $id_locale Locale identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProgramPlatformLocaleAsync($id_program, $id_platform, $id_locale)
    {
        return $this->deleteProgramPlatformLocaleAsyncWithHttpInfo($id_program, $id_platform, $id_locale)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteProgramPlatformLocaleAsyncWithHttpInfo
     *
     * Deletes a program configuration for a specific platform and locale
     *
     * @param  string $id_program Program identifier (required)
     * @param  string $id_platform Platform identifier (required)
     * @param  string $id_locale Locale identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProgramPlatformLocaleAsyncWithHttpInfo($id_program, $id_platform, $id_locale)
    {
        $returnType = '\Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale';
        $request = $this->deleteProgramPlatformLocaleRequest($id_program, $id_platform, $id_locale);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteProgramPlatformLocale'
     *
     * @param  string $id_program Program identifier (required)
     * @param  string $id_platform Platform identifier (required)
     * @param  string $id_locale Locale identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteProgramPlatformLocaleRequest($id_program, $id_platform, $id_locale)
    {
        // verify the required parameter 'id_program' is set
        if ($id_program === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_program when calling deleteProgramPlatformLocale'
            );
        }
        // verify the required parameter 'id_platform' is set
        if ($id_platform === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_platform when calling deleteProgramPlatformLocale'
            );
        }
        // verify the required parameter 'id_locale' is set
        if ($id_locale === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_locale when calling deleteProgramPlatformLocale'
            );
        }

        $resourcePath = '/programs/{id_program}/platforms/{id_platform}/locales/{id_locale}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id_program !== null) {
            $resourcePath = str_replace(
                '{' . 'id_program' . '}',
                ObjectSerializer::toPathValue($id_program),
                $resourcePath
            );
        }
        // path params
        if ($id_platform !== null) {
            $resourcePath = str_replace(
                '{' . 'id_platform' . '}',
                ObjectSerializer::toPathValue($id_platform),
                $resourcePath
            );
        }
        // path params
        if ($id_locale !== null) {
            $resourcePath = str_replace(
                '{' . 'id_locale' . '}',
                ObjectSerializer::toPathValue($id_locale),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findProgramPlatformLocale
     *
     * Finds a program configuration for a specific platform for all locales
     *
     * @param  string $id_program Program identifier (required)
     * @param  string $id_platform Platform identifier (required)
     *
     * @throws \Softonic\NoodleSetupApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale[]
     */
    public function findProgramPlatformLocale($id_program, $id_platform)
    {
        list($response) = $this->findProgramPlatformLocaleWithHttpInfo($id_program, $id_platform);
        return $response;
    }

    /**
     * Operation findProgramPlatformLocaleWithHttpInfo
     *
     * Finds a program configuration for a specific platform for all locales
     *
     * @param  string $id_program Program identifier (required)
     * @param  string $id_platform Platform identifier (required)
     *
     * @throws \Softonic\NoodleSetupApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale[], HTTP status code, HTTP response headers (array of strings)
     */
    public function findProgramPlatformLocaleWithHttpInfo($id_program, $id_platform)
    {
        $returnType = '\Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale[]';
        $request = $this->findProgramPlatformLocaleRequest($id_program, $id_platform);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findProgramPlatformLocaleAsync
     *
     * Finds a program configuration for a specific platform for all locales
     *
     * @param  string $id_program Program identifier (required)
     * @param  string $id_platform Platform identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findProgramPlatformLocaleAsync($id_program, $id_platform)
    {
        return $this->findProgramPlatformLocaleAsyncWithHttpInfo($id_program, $id_platform)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findProgramPlatformLocaleAsyncWithHttpInfo
     *
     * Finds a program configuration for a specific platform for all locales
     *
     * @param  string $id_program Program identifier (required)
     * @param  string $id_platform Platform identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findProgramPlatformLocaleAsyncWithHttpInfo($id_program, $id_platform)
    {
        $returnType = '\Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale[]';
        $request = $this->findProgramPlatformLocaleRequest($id_program, $id_platform);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findProgramPlatformLocale'
     *
     * @param  string $id_program Program identifier (required)
     * @param  string $id_platform Platform identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function findProgramPlatformLocaleRequest($id_program, $id_platform)
    {
        // verify the required parameter 'id_program' is set
        if ($id_program === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_program when calling findProgramPlatformLocale'
            );
        }
        // verify the required parameter 'id_platform' is set
        if ($id_platform === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_platform when calling findProgramPlatformLocale'
            );
        }

        $resourcePath = '/programs/{id_program}/platforms/{id_platform}/locales';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id_program !== null) {
            $resourcePath = str_replace(
                '{' . 'id_program' . '}',
                ObjectSerializer::toPathValue($id_program),
                $resourcePath
            );
        }
        // path params
        if ($id_platform !== null) {
            $resourcePath = str_replace(
                '{' . 'id_platform' . '}',
                ObjectSerializer::toPathValue($id_platform),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation readProgramPlatformLocale
     *
     * Reads a program configuration for a specific platform and locale
     *
     * @param  string $id_program Program identifier (required)
     * @param  string $id_platform Platform identifier (required)
     * @param  string $id_locale Locale identifier (required)
     *
     * @throws \Softonic\NoodleSetupApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale
     */
    public function readProgramPlatformLocale($id_program, $id_platform, $id_locale)
    {
        list($response) = $this->readProgramPlatformLocaleWithHttpInfo($id_program, $id_platform, $id_locale);
        return $response;
    }

    /**
     * Operation readProgramPlatformLocaleWithHttpInfo
     *
     * Reads a program configuration for a specific platform and locale
     *
     * @param  string $id_program Program identifier (required)
     * @param  string $id_platform Platform identifier (required)
     * @param  string $id_locale Locale identifier (required)
     *
     * @throws \Softonic\NoodleSetupApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale, HTTP status code, HTTP response headers (array of strings)
     */
    public function readProgramPlatformLocaleWithHttpInfo($id_program, $id_platform, $id_locale)
    {
        $returnType = '\Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale';
        $request = $this->readProgramPlatformLocaleRequest($id_program, $id_platform, $id_locale);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation readProgramPlatformLocaleAsync
     *
     * Reads a program configuration for a specific platform and locale
     *
     * @param  string $id_program Program identifier (required)
     * @param  string $id_platform Platform identifier (required)
     * @param  string $id_locale Locale identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readProgramPlatformLocaleAsync($id_program, $id_platform, $id_locale)
    {
        return $this->readProgramPlatformLocaleAsyncWithHttpInfo($id_program, $id_platform, $id_locale)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation readProgramPlatformLocaleAsyncWithHttpInfo
     *
     * Reads a program configuration for a specific platform and locale
     *
     * @param  string $id_program Program identifier (required)
     * @param  string $id_platform Platform identifier (required)
     * @param  string $id_locale Locale identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readProgramPlatformLocaleAsyncWithHttpInfo($id_program, $id_platform, $id_locale)
    {
        $returnType = '\Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale';
        $request = $this->readProgramPlatformLocaleRequest($id_program, $id_platform, $id_locale);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'readProgramPlatformLocale'
     *
     * @param  string $id_program Program identifier (required)
     * @param  string $id_platform Platform identifier (required)
     * @param  string $id_locale Locale identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function readProgramPlatformLocaleRequest($id_program, $id_platform, $id_locale)
    {
        // verify the required parameter 'id_program' is set
        if ($id_program === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_program when calling readProgramPlatformLocale'
            );
        }
        // verify the required parameter 'id_platform' is set
        if ($id_platform === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_platform when calling readProgramPlatformLocale'
            );
        }
        // verify the required parameter 'id_locale' is set
        if ($id_locale === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_locale when calling readProgramPlatformLocale'
            );
        }

        $resourcePath = '/programs/{id_program}/platforms/{id_platform}/locales/{id_locale}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id_program !== null) {
            $resourcePath = str_replace(
                '{' . 'id_program' . '}',
                ObjectSerializer::toPathValue($id_program),
                $resourcePath
            );
        }
        // path params
        if ($id_platform !== null) {
            $resourcePath = str_replace(
                '{' . 'id_platform' . '}',
                ObjectSerializer::toPathValue($id_platform),
                $resourcePath
            );
        }
        // path params
        if ($id_locale !== null) {
            $resourcePath = str_replace(
                '{' . 'id_locale' . '}',
                ObjectSerializer::toPathValue($id_locale),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation replaceProgramPlatformLocale
     *
     * Replaces a program configuration for a specific platform and locale
     *
     * @param  string $id_program Program identifier (required)
     * @param  string $id_platform Platform identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  \Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale $body body (required)
     *
     * @throws \Softonic\NoodleSetupApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale
     */
    public function replaceProgramPlatformLocale($id_program, $id_platform, $id_locale, $body)
    {
        list($response) = $this->replaceProgramPlatformLocaleWithHttpInfo($id_program, $id_platform, $id_locale, $body);
        return $response;
    }

    /**
     * Operation replaceProgramPlatformLocaleWithHttpInfo
     *
     * Replaces a program configuration for a specific platform and locale
     *
     * @param  string $id_program Program identifier (required)
     * @param  string $id_platform Platform identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  \Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale $body (required)
     *
     * @throws \Softonic\NoodleSetupApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale, HTTP status code, HTTP response headers (array of strings)
     */
    public function replaceProgramPlatformLocaleWithHttpInfo($id_program, $id_platform, $id_locale, $body)
    {
        $returnType = '\Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale';
        $request = $this->replaceProgramPlatformLocaleRequest($id_program, $id_platform, $id_locale, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation replaceProgramPlatformLocaleAsync
     *
     * Replaces a program configuration for a specific platform and locale
     *
     * @param  string $id_program Program identifier (required)
     * @param  string $id_platform Platform identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  \Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replaceProgramPlatformLocaleAsync($id_program, $id_platform, $id_locale, $body)
    {
        return $this->replaceProgramPlatformLocaleAsyncWithHttpInfo($id_program, $id_platform, $id_locale, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation replaceProgramPlatformLocaleAsyncWithHttpInfo
     *
     * Replaces a program configuration for a specific platform and locale
     *
     * @param  string $id_program Program identifier (required)
     * @param  string $id_platform Platform identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  \Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replaceProgramPlatformLocaleAsyncWithHttpInfo($id_program, $id_platform, $id_locale, $body)
    {
        $returnType = '\Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale';
        $request = $this->replaceProgramPlatformLocaleRequest($id_program, $id_platform, $id_locale, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'replaceProgramPlatformLocale'
     *
     * @param  string $id_program Program identifier (required)
     * @param  string $id_platform Platform identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  \Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function replaceProgramPlatformLocaleRequest($id_program, $id_platform, $id_locale, $body)
    {
        // verify the required parameter 'id_program' is set
        if ($id_program === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_program when calling replaceProgramPlatformLocale'
            );
        }
        // verify the required parameter 'id_platform' is set
        if ($id_platform === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_platform when calling replaceProgramPlatformLocale'
            );
        }
        // verify the required parameter 'id_locale' is set
        if ($id_locale === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_locale when calling replaceProgramPlatformLocale'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling replaceProgramPlatformLocale'
            );
        }

        $resourcePath = '/programs/{id_program}/platforms/{id_platform}/locales/{id_locale}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id_program !== null) {
            $resourcePath = str_replace(
                '{' . 'id_program' . '}',
                ObjectSerializer::toPathValue($id_program),
                $resourcePath
            );
        }
        // path params
        if ($id_platform !== null) {
            $resourcePath = str_replace(
                '{' . 'id_platform' . '}',
                ObjectSerializer::toPathValue($id_platform),
                $resourcePath
            );
        }
        // path params
        if ($id_locale !== null) {
            $resourcePath = str_replace(
                '{' . 'id_locale' . '}',
                ObjectSerializer::toPathValue($id_locale),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            elseif ($httpBody instanceof ModelInterface && $headers['Content-Type'] === 'application/json') {
                $httpBody = $httpBody->toArray(true);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateProgramPlatformLocale
     *
     * Updates a program configuration for a specific platform and locale
     *
     * @param  string $id_program Program identifier (required)
     * @param  string $id_platform Platform identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  \Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale $body body (required)
     *
     * @throws \Softonic\NoodleSetupApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale
     */
    public function updateProgramPlatformLocale($id_program, $id_platform, $id_locale, $body)
    {
        list($response) = $this->updateProgramPlatformLocaleWithHttpInfo($id_program, $id_platform, $id_locale, $body);
        return $response;
    }

    /**
     * Operation updateProgramPlatformLocaleWithHttpInfo
     *
     * Updates a program configuration for a specific platform and locale
     *
     * @param  string $id_program Program identifier (required)
     * @param  string $id_platform Platform identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  \Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale $body (required)
     *
     * @throws \Softonic\NoodleSetupApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProgramPlatformLocaleWithHttpInfo($id_program, $id_platform, $id_locale, $body)
    {
        $returnType = '\Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale';
        $request = $this->updateProgramPlatformLocaleRequest($id_program, $id_platform, $id_locale, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateProgramPlatformLocaleAsync
     *
     * Updates a program configuration for a specific platform and locale
     *
     * @param  string $id_program Program identifier (required)
     * @param  string $id_platform Platform identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  \Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProgramPlatformLocaleAsync($id_program, $id_platform, $id_locale, $body)
    {
        return $this->updateProgramPlatformLocaleAsyncWithHttpInfo($id_program, $id_platform, $id_locale, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateProgramPlatformLocaleAsyncWithHttpInfo
     *
     * Updates a program configuration for a specific platform and locale
     *
     * @param  string $id_program Program identifier (required)
     * @param  string $id_platform Platform identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  \Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProgramPlatformLocaleAsyncWithHttpInfo($id_program, $id_platform, $id_locale, $body)
    {
        $returnType = '\Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale';
        $request = $this->updateProgramPlatformLocaleRequest($id_program, $id_platform, $id_locale, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateProgramPlatformLocale'
     *
     * @param  string $id_program Program identifier (required)
     * @param  string $id_platform Platform identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  \Softonic\NoodleSetupApiSdk\Client\Model\ProgramPlatformLocale $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateProgramPlatformLocaleRequest($id_program, $id_platform, $id_locale, $body)
    {
        // verify the required parameter 'id_program' is set
        if ($id_program === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_program when calling updateProgramPlatformLocale'
            );
        }
        // verify the required parameter 'id_platform' is set
        if ($id_platform === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_platform when calling updateProgramPlatformLocale'
            );
        }
        // verify the required parameter 'id_locale' is set
        if ($id_locale === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_locale when calling updateProgramPlatformLocale'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateProgramPlatformLocale'
            );
        }

        $resourcePath = '/programs/{id_program}/platforms/{id_platform}/locales/{id_locale}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id_program !== null) {
            $resourcePath = str_replace(
                '{' . 'id_program' . '}',
                ObjectSerializer::toPathValue($id_program),
                $resourcePath
            );
        }
        // path params
        if ($id_platform !== null) {
            $resourcePath = str_replace(
                '{' . 'id_platform' . '}',
                ObjectSerializer::toPathValue($id_platform),
                $resourcePath
            );
        }
        // path params
        if ($id_locale !== null) {
            $resourcePath = str_replace(
                '{' . 'id_locale' . '}',
                ObjectSerializer::toPathValue($id_locale),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
