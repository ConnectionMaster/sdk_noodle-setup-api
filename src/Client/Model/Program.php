<?php
/**
 * Program
 *
 * PHP version 5
 *
 * @category Class
 * @package  Softonic\NoodleSetupApiSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Noodle Setup API
 *
 * API that allows configure programs for Noodle
 *
 * OpenAPI spec version: 1.0.0
 * Contact: development@softonic.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Softonic\NoodleSetupApiSdk\Client\Model;

use \ArrayAccess;
use \Softonic\NoodleSetupApiSdk\ObjectSerializer;

/**
 * Program Class Doc Comment
 *
 * @category Class
 * @package  Softonic\NoodleSetupApiSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Program implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Program';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id_program' => 'string',
        'locale' => 'string',
        'show_download_button' => 'bool',
        'force_external_download' => 'bool',
        'force_direct_download' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id_program' => 'uuid',
        'locale' => null,
        'show_download_button' => null,
        'force_external_download' => null,
        'force_direct_download' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id_program' => 'id_program',
        'locale' => 'locale',
        'show_download_button' => 'show_download_button',
        'force_external_download' => 'force_external_download',
        'force_direct_download' => 'force_direct_download'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id_program' => 'setIdProgram',
        'locale' => 'setLocale',
        'show_download_button' => 'setShowDownloadButton',
        'force_external_download' => 'setForceExternalDownload',
        'force_direct_download' => 'setForceDirectDownload'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id_program' => 'getIdProgram',
        'locale' => 'getLocale',
        'show_download_button' => 'getShowDownloadButton',
        'force_external_download' => 'getForceExternalDownload',
        'force_direct_download' => 'getForceDirectDownload'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id_program'] = isset($data['id_program']) ? $data['id_program'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : 'en';
        $this->container['show_download_button'] = isset($data['show_download_button']) ? $data['show_download_button'] : false;
        $this->container['force_external_download'] = isset($data['force_external_download']) ? $data['force_external_download'] : false;
        $this->container['force_direct_download'] = isset($data['force_direct_download']) ? $data['force_direct_download'] : false;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id_program'] === null) {
            $invalidProperties[] = "'id_program' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id_program'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id_program
     *
     * @return string
     */
    public function getIdProgram()
    {
        return $this->container['id_program'];
    }

    /**
     * Sets id_program
     *
     * @param string $id_program The program id
     *
     * @return $this
     */
    public function setIdProgram($id_program)
    {
        $this->container['id_program'] = $id_program;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string $locale The Softonic locale
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets show_download_button
     *
     * @return bool
     */
    public function getShowDownloadButton()
    {
        return $this->container['show_download_button'];
    }

    /**
     * Sets show_download_button
     *
     * @param bool $show_download_button If the download button is shown for the program
     *
     * @return $this
     */
    public function setShowDownloadButton($show_download_button)
    {
        $this->container['show_download_button'] = $show_download_button;

        return $this;
    }

    /**
     * Gets force_external_download
     *
     * @return bool
     */
    public function getForceExternalDownload()
    {
        return $this->container['force_external_download'];
    }

    /**
     * Sets force_external_download
     *
     * @param bool $force_external_download If the download for the program is forced to external
     *
     * @return $this
     */
    public function setForceExternalDownload($force_external_download)
    {
        $this->container['force_external_download'] = $force_external_download;

        return $this;
    }

    /**
     * Gets force_direct_download
     *
     * @return bool
     */
    public function getForceDirectDownload()
    {
        return $this->container['force_direct_download'];
    }

    /**
     * Sets force_direct_download
     *
     * @param bool $force_direct_download If the download for the program is forced to internal
     *
     * @return $this
     */
    public function setForceDirectDownload($force_direct_download)
    {
        $this->container['force_direct_download'] = $force_direct_download;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


