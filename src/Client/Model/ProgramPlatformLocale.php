<?php
/**
 * ProgramPlatformLocale
 *
 * PHP version 5
 *
 * @category Class
 * @package  Softonic\NoodleSetupApiSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Noodle Setup API
 *
 * API that allows configure programs for Noodle
 *
 * OpenAPI spec version: 1.0.0
 * Contact: development@softonic.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Softonic\NoodleSetupApiSdk\Client\Model;

use \ArrayAccess;
use \JsonSerializable;
use \Softonic\NoodleSetupApiSdk\ObjectSerializer;

/**
 * ProgramPlatformLocale Class Doc Comment
 *
 * @category Class
 * @package  Softonic\NoodleSetupApiSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProgramPlatformLocale implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    const GET_ALL_ATTRIBUTES = true;

    const GET_SET_ATTRIBUTES = false;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProgramPlatformLocale';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id_program' => 'string',
        'id_platform' => 'string',
        'id_locale' => 'string',
        'legal_advisory' => 'string',
        'legal_note' => 'string',
        'dont_allow_download' => 'bool',
        'force_external_download' => 'bool',
        'is_sales_client' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id_program' => 'uuid',
        'id_platform' => null,
        'id_locale' => null,
        'legal_advisory' => null,
        'legal_note' => null,
        'dont_allow_download' => null,
        'force_external_download' => null,
        'is_sales_client' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id_program' => 'id_program',
        'id_platform' => 'id_platform',
        'id_locale' => 'id_locale',
        'legal_advisory' => 'legal_advisory',
        'legal_note' => 'legal_note',
        'dont_allow_download' => 'dont_allow_download',
        'force_external_download' => 'force_external_download',
        'is_sales_client' => 'is_sales_client'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id_program' => 'setIdProgram',
        'id_platform' => 'setIdPlatform',
        'id_locale' => 'setIdLocale',
        'legal_advisory' => 'setLegalAdvisory',
        'legal_note' => 'setLegalNote',
        'dont_allow_download' => 'setDontAllowDownload',
        'force_external_download' => 'setForceExternalDownload',
        'is_sales_client' => 'setIsSalesClient'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id_program' => 'getIdProgram',
        'id_platform' => 'getIdPlatform',
        'id_locale' => 'getIdLocale',
        'legal_advisory' => 'getLegalAdvisory',
        'legal_note' => 'getLegalNote',
        'dont_allow_download' => 'getDontAllowDownload',
        'force_external_download' => 'getForceExternalDownload',
        'is_sales_client' => 'getIsSalesClient'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LEGAL_ADVISORY_AUTO = 'AUTO';
    const LEGAL_ADVISORY_WITHTOOLBAR = 'WITHTOOLBAR';
    const LEGAL_ADVISORY_MANUAL = 'MANUAL';
    const LEGAL_ADVISORY_DISABLED = 'DISABLED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLegalAdvisoryAllowableValues()
    {
        return [
            self::LEGAL_ADVISORY_AUTO,
            self::LEGAL_ADVISORY_WITHTOOLBAR,
            self::LEGAL_ADVISORY_MANUAL,
            self::LEGAL_ADVISORY_DISABLED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = [])
    {
        array_key_exists('id_program', $data) && $this->container['id_program'] = $data['id_program'];
        array_key_exists('id_platform', $data) && $this->container['id_platform'] = $data['id_platform'];
        array_key_exists('id_locale', $data) && $this->container['id_locale'] = $data['id_locale'];
        array_key_exists('legal_advisory', $data) && $this->container['legal_advisory'] = $data['legal_advisory'];
        array_key_exists('legal_note', $data) && $this->container['legal_note'] = $data['legal_note'];
        array_key_exists('dont_allow_download', $data) && $this->container['dont_allow_download'] = $data['dont_allow_download'];
        array_key_exists('force_external_download', $data) && $this->container['force_external_download'] = $data['force_external_download'];
        array_key_exists('is_sales_client', $data) && $this->container['is_sales_client'] = $data['is_sales_client'];
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (array_key_exists('id_program', $this->container) && $this->container['id_program'] === null) {
            $invalidProperties[] = "'id_program' can't be null";
        }
        if (array_key_exists('id_platform', $this->container) && $this->container['id_platform'] === null) {
            $invalidProperties[] = "'id_platform' can't be null";
        }
        if (array_key_exists('id_locale', $this->container) && $this->container['id_locale'] === null) {
            $invalidProperties[] = "'id_locale' can't be null";
        }
        $allowedValues = $this->getLegalAdvisoryAllowableValues();
        if (array_key_exists('legal_advisory', $this->container) && ($this->container['legal_advisory'] !== null) && !in_array($this->container['legal_advisory'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'legal_advisory', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (array_key_exists('id_program', $this->container) && $this->container['id_program'] === null) {
            return false;
        }
        if (array_key_exists('id_platform', $this->container) && $this->container['id_platform'] === null) {
            return false;
        }
        if (array_key_exists('id_locale', $this->container) && $this->container['id_locale'] === null) {
            return false;
        }
        $allowedValues = $this->getLegalAdvisoryAllowableValues();
        if (array_key_exists('legal_advisory', $this->container) && ($this->container['legal_advisory'] !== null) && !in_array($this->container['legal_advisory'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id_program
     *
     * @return string
     */
    public function getIdProgram()
    {
        return $this->container['id_program'];
    }

    /**
     * Sets id_program
     *
     * @param string $id_program Program identifier
     *
     * @return $this
     */
    public function setIdProgram($id_program)
    {
        $this->container['id_program'] = $id_program;

        return $this;
    }

    /**
     * Gets id_platform
     *
     * @return string
     */
    public function getIdPlatform()
    {
        return $this->container['id_platform'];
    }

    /**
     * Sets id_platform
     *
     * @param string $id_platform Platform identifier
     *
     * @return $this
     */
    public function setIdPlatform($id_platform)
    {
        $this->container['id_platform'] = $id_platform;

        return $this;
    }

    /**
     * Gets id_locale
     *
     * @return string
     */
    public function getIdLocale()
    {
        return $this->container['id_locale'];
    }

    /**
     * Sets id_locale
     *
     * @param string $id_locale Locale identifier
     *
     * @return $this
     */
    public function setIdLocale($id_locale)
    {
        $this->container['id_locale'] = $id_locale;

        return $this;
    }

    /**
     * Gets legal_advisory
     *
     * @return string
     */
    public function getLegalAdvisory()
    {
        return $this->container['legal_advisory'];
    }

    /**
     * Sets legal_advisory
     *
     * @param string $legal_advisory Type of legal advisory.
     *
     * @return $this
     */
    public function setLegalAdvisory($legal_advisory)
    {
        $allowedValues = $this->getLegalAdvisoryAllowableValues();
        if (!is_null($legal_advisory) && !in_array($legal_advisory, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'legal_advisory', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['legal_advisory'] = $legal_advisory;

        return $this;
    }

    /**
     * Gets legal_note
     *
     * @return string
     */
    public function getLegalNote()
    {
        return $this->container['legal_note'];
    }

    /**
     * Sets legal_note
     *
     * @param string $legal_note Legal note, in case the advisory type is MANUAL. It can be up to 65535 bytes.
     *
     * @return $this
     */
    public function setLegalNote($legal_note)
    {
        $this->container['legal_note'] = $legal_note;

        return $this;
    }

    /**
     * Gets dont_allow_download
     *
     * @return bool
     */
    public function getDontAllowDownload()
    {
        return $this->container['dont_allow_download'];
    }

    /**
     * Sets dont_allow_download
     *
     * @param bool $dont_allow_download If true no download button should be shown
     *
     * @return $this
     */
    public function setDontAllowDownload($dont_allow_download)
    {
        $this->container['dont_allow_download'] = $dont_allow_download;

        return $this;
    }

    /**
     * Gets force_external_download
     *
     * @return bool
     */
    public function getForceExternalDownload()
    {
        return $this->container['force_external_download'];
    }

    /**
     * Sets force_external_download
     *
     * @param bool $force_external_download If the download for the program is forced to external
     *
     * @return $this
     */
    public function setForceExternalDownload($force_external_download)
    {
        $this->container['force_external_download'] = $force_external_download;

        return $this;
    }

    /**
     * Gets is_sales_client
     *
     * @return bool
     */
    public function getIsSalesClient()
    {
        return $this->container['is_sales_client'];
    }

    /**
     * Sets is_sales_client
     *
     * @param bool $is_sales_client This program pays in some way to the company, affects compliance rules
     *
     * @return $this
     */
    public function setIsSalesClient($is_sales_client)
    {
        $this->container['is_sales_client'] = $is_sales_client;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return array_key_exists($offset, $this->container);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Returns data which can be serialized by json_encode()
     *
     * @return mixed[]
     */
    public function jsonSerialize()
    {
        return $this->container;
    }

    /**
     * Returns data as array.
     *
     * @param bool $getAllAttributes Should convert with all attributes or just the set ones?
     *
     * @return array
     */
    public function toArray($getAllAttributes = self::GET_ALL_ATTRIBUTES)
    {
        if (!$getAllAttributes) {
            return $this->container;
        }

        foreach (self::$attributeMap as $attribute) {
            $data[$attribute] = $this->container[$attribute] ?? null;
        }

        return $data;
    }
}


